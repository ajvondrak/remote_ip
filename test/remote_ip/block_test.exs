defmodule RemoteIp.BlockTest do
  use ExUnit.Case, async: true

  alias RemoteIp.Block

  def octets(n) do
    Stream.repeatedly(fn -> Enum.random(0..255) end) |> Enum.take(n)
  end

  def ipv4(octets) do
    octets |> Enum.join(".")
  end

  def hextets(n) do
    Stream.repeatedly(fn -> Enum.random(0..65_535) end) |> Enum.take(n)
  end

  def ipv6(hextets) do
    hextets |> Enum.map(&Integer.to_string(&1, 16)) |> Enum.join(":")
  end

  def parse!(cidr) do
    Block.parse!(cidr)
  end

  test "parse vs parse!" do
    {:ok, success} = Block.parse("127.0.0.1")
    assert Block.parse!("127.0.0.1") == success

    {:error, error} = Block.parse("127001")
    assert_raise ArgumentError, error, fn -> parse!("127001") end
  end

  test "parsing invalid CIDR" do
    assert_raise ArgumentError, ~S'Invalid address "invalid" in CIDR "invalid"', fn ->
      parse!("invalid")
    end
  end

  describe "parsing IPv4" do
    test "invalid address and prefix" do
      assert_raise ArgumentError, ~S'Invalid address "3.14" in CIDR "3.14/159"', fn ->
        parse!("3.14/159")
      end
    end

    test "invalid address" do
      assert_raise ArgumentError, ~S'Invalid address "3.141.592.6" in CIDR "3.141.592.6/5"', fn ->
        parse!("3.141.592.6/5")
      end
    end

    test "invalid prefix" do
      assert_raise ArgumentError, ~S'Invalid prefix "invalid" in CIDR "0.0.0.0/invalid"', fn ->
        parse!("0.0.0.0/invalid")
      end
    end

    test "negative prefix" do
      assert_raise ArgumentError, ~S'Invalid prefix -1 in CIDR "0.0.0.0/-1"', fn ->
        parse!("0.0.0.0/-1")
      end
    end

    test "oversized prefix" do
      assert_raise ArgumentError, ~S'Invalid prefix 33 in CIDR "0.0.0.0/33"', fn ->
        parse!("0.0.0.0/33")
      end
    end

    test "address sans prefix" do
      ip = ipv4(octets(4))
      assert parse!(ip) == parse!("#{ip}/32")
    end

    test "addresses" do
      [a, b, c, d] = octets(4)
      assert %Block{net: <<^a, ^b, ^c, ^d>>} = parse!(ipv4([a, b, c, d]))
      assert %Block{net: <<0, 0, 0, 0>>} = parse!("0.0.0.0")
      assert %Block{net: <<255, 255, 255, 255>>} = parse!("255.255.255.255")
      assert %Block{net: <<10, 0, 0, 0>>} = parse!("10.0.0.0")
      assert %Block{net: <<127, 0, 0, 1>>} = parse!("127.0.0.1")
      assert %Block{net: <<192, 168, 0, 1>>} = parse!("192.168.0.1")
      assert %Block{net: <<3, 14, 15, 92>>} = parse!("3.14.15.92")
    end

    test "masks" do
      assert %Block{mask: <<0b00000000000000000000000000000000::32>>} = parse!("0.0.0.0/0")
      assert %Block{mask: <<0b10000000000000000000000000000000::32>>} = parse!("0.0.0.0/1")
      assert %Block{mask: <<0b11000000000000000000000000000000::32>>} = parse!("0.0.0.0/2")
      assert %Block{mask: <<0b11100000000000000000000000000000::32>>} = parse!("0.0.0.0/3")
      assert %Block{mask: <<0b11110000000000000000000000000000::32>>} = parse!("0.0.0.0/4")
      assert %Block{mask: <<0b11111000000000000000000000000000::32>>} = parse!("0.0.0.0/5")
      assert %Block{mask: <<0b11111100000000000000000000000000::32>>} = parse!("0.0.0.0/6")
      assert %Block{mask: <<0b11111110000000000000000000000000::32>>} = parse!("0.0.0.0/7")
      assert %Block{mask: <<0b11111111000000000000000000000000::32>>} = parse!("0.0.0.0/8")
      assert %Block{mask: <<0b11111111100000000000000000000000::32>>} = parse!("0.0.0.0/9")
      assert %Block{mask: <<0b11111111110000000000000000000000::32>>} = parse!("0.0.0.0/10")
      assert %Block{mask: <<0b11111111111000000000000000000000::32>>} = parse!("0.0.0.0/11")
      assert %Block{mask: <<0b11111111111100000000000000000000::32>>} = parse!("0.0.0.0/12")
      assert %Block{mask: <<0b11111111111110000000000000000000::32>>} = parse!("0.0.0.0/13")
      assert %Block{mask: <<0b11111111111111000000000000000000::32>>} = parse!("0.0.0.0/14")
      assert %Block{mask: <<0b11111111111111100000000000000000::32>>} = parse!("0.0.0.0/15")
      assert %Block{mask: <<0b11111111111111110000000000000000::32>>} = parse!("0.0.0.0/16")
      assert %Block{mask: <<0b11111111111111111000000000000000::32>>} = parse!("0.0.0.0/17")
      assert %Block{mask: <<0b11111111111111111100000000000000::32>>} = parse!("0.0.0.0/18")
      assert %Block{mask: <<0b11111111111111111110000000000000::32>>} = parse!("0.0.0.0/19")
      assert %Block{mask: <<0b11111111111111111111000000000000::32>>} = parse!("0.0.0.0/20")
      assert %Block{mask: <<0b11111111111111111111100000000000::32>>} = parse!("0.0.0.0/21")
      assert %Block{mask: <<0b11111111111111111111110000000000::32>>} = parse!("0.0.0.0/22")
      assert %Block{mask: <<0b11111111111111111111111000000000::32>>} = parse!("0.0.0.0/23")
      assert %Block{mask: <<0b11111111111111111111111100000000::32>>} = parse!("0.0.0.0/24")
      assert %Block{mask: <<0b11111111111111111111111110000000::32>>} = parse!("0.0.0.0/25")
      assert %Block{mask: <<0b11111111111111111111111111000000::32>>} = parse!("0.0.0.0/26")
      assert %Block{mask: <<0b11111111111111111111111111100000::32>>} = parse!("0.0.0.0/27")
      assert %Block{mask: <<0b11111111111111111111111111110000::32>>} = parse!("0.0.0.0/28")
      assert %Block{mask: <<0b11111111111111111111111111111000::32>>} = parse!("0.0.0.0/29")
      assert %Block{mask: <<0b11111111111111111111111111111100::32>>} = parse!("0.0.0.0/30")
      assert %Block{mask: <<0b11111111111111111111111111111110::32>>} = parse!("0.0.0.0/31")
      assert %Block{mask: <<0b11111111111111111111111111111111::32>>} = parse!("0.0.0.0/32")
    end

    test "reserved ranges" do
      assert parse!("127.0.0.0/8") == %Block{net: <<127, 0, 0, 0>>, mask: <<255, 0, 0, 0>>}
      assert parse!("10.0.0.0/8") == %Block{net: <<10, 0, 0, 0>>, mask: <<255, 0, 0, 0>>}
      assert parse!("172.16.0.0/12") == %Block{net: <<172, 16, 0, 0>>, mask: <<255, 240, 0, 0>>}
      assert parse!("192.168.0.0/16") == %Block{net: <<192, 168, 0, 0>>, mask: <<255, 255, 0, 0>>}
    end
  end

  describe "parsing IPv6" do
    test "invalid address and prefix" do
      assert_raise ArgumentError, ~S'Invalid address "a:b:c" in CIDR "a:b:c/1/2/3"', fn ->
        parse!("a:b:c/1/2/3")
      end
    end

    test "invalid address" do
      assert_raise ArgumentError, ~S'Invalid address "f7::u" in CIDR "f7::u/12"', fn ->
        parse!("f7::u/12")
      end
    end

    test "invalid prefix" do
      assert_raise ArgumentError, ~S'Invalid prefix "1/2/3" in CIDR "::a:b:c/1/2/3"', fn ->
        parse!("::a:b:c/1/2/3")
      end
    end

    test "negative prefix" do
      assert_raise ArgumentError, ~S'Invalid prefix -1 in CIDR "::/-1"', fn ->
        parse!("::/-1")
      end
    end

    test "oversized prefix" do
      assert_raise ArgumentError, ~S'Invalid prefix 129 in CIDR "::/129"', fn ->
        parse!("::/129")
      end
    end

    test "address sans prefix" do
      ip = ipv6(hextets(8))
      assert parse!(ip) == parse!("#{ip}/128")
    end

    test "addresses" do
      [a, b, c, d, e, f, g, h] = hextets(8)
      assert %Block{net: <<^a::16, ^b::16, ^c::16, ^d::16, ^e::16, ^f::16, ^g::16, ^h::16>>} = parse!(ipv6([a, b, c, d, e, f, g, h]))
      assert %Block{net: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>} = parse!("::")
      assert %Block{net: <<255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255>>} = parse!("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
      assert %Block{net: <<0x1111::16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x9999::16>>} = parse!("1111::9999")
      assert %Block{net: <<0x000A::16, 0x000B::16, 0x000C::16, 0x000D::16, 0x000E::16, 0x000F::16, 0, 0, 0, 0>>} = parse!("a:b:c:d:e:f::")
      assert %Block{net: <<0x0003::16, 0x0014::16, 0x0159::16, 0x2653::16, 0x0005::16, 0x0089::16, 0x0793::16, 0x2384::16>>} = parse!("3:14:159:2653:5:89:793:2384")
    end

    test "masks" do
      assert %Block{mask: <<0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/0")
      assert %Block{mask: <<0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/1")
      assert %Block{mask: <<0b11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/2")
      assert %Block{mask: <<0b11100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/3")
      assert %Block{mask: <<0b11110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/4")
      assert %Block{mask: <<0b11111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/5")
      assert %Block{mask: <<0b11111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/6")
      assert %Block{mask: <<0b11111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/7")
      assert %Block{mask: <<0b11111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/8")
      assert %Block{mask: <<0b11111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/9")
      assert %Block{mask: <<0b11111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/10")
      assert %Block{mask: <<0b11111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/11")
      assert %Block{mask: <<0b11111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/12")
      assert %Block{mask: <<0b11111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/13")
      assert %Block{mask: <<0b11111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/14")
      assert %Block{mask: <<0b11111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/15")
      assert %Block{mask: <<0b11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/16")
      assert %Block{mask: <<0b11111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/17")
      assert %Block{mask: <<0b11111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/18")
      assert %Block{mask: <<0b11111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/19")
      assert %Block{mask: <<0b11111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/20")
      assert %Block{mask: <<0b11111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/21")
      assert %Block{mask: <<0b11111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/22")
      assert %Block{mask: <<0b11111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/23")
      assert %Block{mask: <<0b11111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/24")
      assert %Block{mask: <<0b11111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/25")
      assert %Block{mask: <<0b11111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/26")
      assert %Block{mask: <<0b11111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/27")
      assert %Block{mask: <<0b11111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/28")
      assert %Block{mask: <<0b11111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/29")
      assert %Block{mask: <<0b11111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/30")
      assert %Block{mask: <<0b11111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/31")
      assert %Block{mask: <<0b11111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/32")
      assert %Block{mask: <<0b11111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/33")
      assert %Block{mask: <<0b11111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/34")
      assert %Block{mask: <<0b11111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/35")
      assert %Block{mask: <<0b11111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/36")
      assert %Block{mask: <<0b11111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/37")
      assert %Block{mask: <<0b11111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/38")
      assert %Block{mask: <<0b11111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/39")
      assert %Block{mask: <<0b11111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/40")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/41")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/42")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/43")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/44")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/45")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/46")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/47")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/48")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/49")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/50")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/51")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/52")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/53")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/54")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/55")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/56")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/57")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/58")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/59")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/60")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/61")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/62")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/63")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/64")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/65")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/66")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/67")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/68")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/69")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/70")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/71")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/72")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/73")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000::128>>} = parse!("::/74")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000::128>>} = parse!("::/75")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000::128>>} = parse!("::/76")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000::128>>} = parse!("::/77")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000::128>>} = parse!("::/78")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000::128>>} = parse!("::/79")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000::128>>} = parse!("::/80")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000::128>>} = parse!("::/81")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000::128>>} = parse!("::/82")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000::128>>} = parse!("::/83")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000::128>>} = parse!("::/84")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000::128>>} = parse!("::/85")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000::128>>} = parse!("::/86")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000::128>>} = parse!("::/87")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000::128>>} = parse!("::/88")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000::128>>} = parse!("::/89")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000::128>>} = parse!("::/90")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000::128>>} = parse!("::/91")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000::128>>} = parse!("::/92")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000::128>>} = parse!("::/93")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000::128>>} = parse!("::/94")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000::128>>} = parse!("::/95")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000::128>>} = parse!("::/96")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000::128>>} = parse!("::/97")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000::128>>} = parse!("::/98")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000::128>>} = parse!("::/99")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000::128>>} = parse!("::/100")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000::128>>} = parse!("::/101")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000::128>>} = parse!("::/102")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000::128>>} = parse!("::/103")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000::128>>} = parse!("::/104")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000::128>>} = parse!("::/105")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000::128>>} = parse!("::/106")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000::128>>} = parse!("::/107")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000::128>>} = parse!("::/108")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000::128>>} = parse!("::/109")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000::128>>} = parse!("::/110")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000::128>>} = parse!("::/111")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000::128>>} = parse!("::/112")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000::128>>} = parse!("::/113")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000::128>>} = parse!("::/114")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000::128>>} = parse!("::/115")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000::128>>} = parse!("::/116")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000::128>>} = parse!("::/117")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000::128>>} = parse!("::/118")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000::128>>} = parse!("::/119")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000::128>>} = parse!("::/120")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000::128>>} = parse!("::/121")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000::128>>} = parse!("::/122")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000::128>>} = parse!("::/123")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000::128>>} = parse!("::/124")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000::128>>} = parse!("::/125")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100::128>>} = parse!("::/126")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110::128>>} = parse!("::/127")
      assert %Block{mask: <<0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111::128>>} = parse!("::/128")
    end

    test "reserved ranges" do
      assert parse!("::1/128") == %Block{
               net: <<0x00000000000000000000000000000001::128>>,
               mask: <<0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF::128>>
             }

      assert parse!("fc00::/7") == %Block{
               net: <<0xFC000000000000000000000000000000::128>>,
               mask: <<0xFE000000000000000000000000000000::128>>
             }
    end
  end

  describe "IPv4 membership" do
    test "inside block" do
      block = parse!("192.168.0.0/16")

      for a <- 0..255, b <- 0..255 do
        assert Block.contains?(block, {192, 168, a, b})
      end
    end

    test "outside block" do
      block = parse!("192.168.0.0/16")
      refute Block.contains?(block, {192, 167, 255, 255})
      refute Block.contains?(block, {192, 169, 0, 0})
      refute Block.contains?(block, {191, 168, 0, 0})
      refute Block.contains?(block, {191, 255, 255, 255})
      refute Block.contains?(block, {194, 0, 0, 0})
      refute Block.contains?(block, {31, 41, 59, 27})
    end

    test "with exact match" do
      block = parse!("127.0.0.1/32")
      refute Block.contains?(block, {127, 0, 0, 0})
      assert Block.contains?(block, {127, 0, 0, 1})
      refute Block.contains?(block, {127, 0, 0, 2})
    end

    test "with zero-length prefix" do
      block = parse!("0.0.0.0/0")
      [a, b, c, d] = octets(4)
      assert Block.contains?(block, {a, b, c, d})
    end

    test "with lower bits that are masked off" do
      block = parse!("192.168.100.14/24")
      assert block.net == <<192, 168, 100, 0>>

      for member <- 0..255 do
        assert Block.contains?(block, {192, 168, 100, member})
      end
    end

    test "against IPv6" do
      block = parse!("0.0.0.0/0")
      [a, b, c, d, e, f, g, h] = hextets(8)
      refute Block.contains?(block, {a, b, c, d, e, f, g, h})
    end
  end

  describe "IPv6 membership" do
    test "inside block" do
      block = parse!("1111:2222:3333:4444:5555:6666:7777:8800/120")

      for member <- 0x8800..0x88FF do
        assert Block.contains?(block, {0x1111, 0x2222, 0x3333, 0x4444, 0x5555, 0x6666, 0x7777, member})
      end
    end

    test "outside block" do
      block = parse!("1111:2222:3333:4444:5555:6666:7777:8800/120")
      refute Block.contains?(block, {0x1111, 0x2222, 0x3333, 0x4444, 0x5555, 0x6666, 0x7777, 0x87FF})
      refute Block.contains?(block, {0x1111, 0x2222, 0x3333, 0x4444, 0x5555, 0x6666, 0x7777, 0x8900})
    end

    test "with exact match" do
      block = parse!("::1/128")
      refute Block.contains?(block, {0, 0, 0, 0, 0, 0, 0, 0})
      assert Block.contains?(block, {0, 0, 0, 0, 0, 0, 0, 1})
      refute Block.contains?(block, {0, 0, 0, 0, 0, 0, 0, 2})
    end

    test "with zero-length prefix" do
      block = parse!("::/0")
      [a, b, c, d, e, f, g, h] = hextets(8)
      assert Block.contains?(block, {a, b, c, d, e, f, g, h})
    end

    test "with lower bits that are masked off" do
      block = parse!("a:b:c:d:e:f::/48")
      assert block.net == <<0x000A::16, 0x000B::16, 0x00C::16, 0::16, 0::16, 0::16, 0::16, 0::16>>
      [d, e, f, g, h] = hextets(5)
      assert Block.contains?(block, {0x000A, 0x000B, 0x000C, d, e, f, g, h})
    end

    test "against IPv4" do
      block = parse!("::/0")
      [a, b, c, d] = octets(4)
      refute Block.contains?(block, {a, b, c, d})
    end
  end
end
